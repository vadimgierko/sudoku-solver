"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/use-backtracking-algorithm",{

/***/ "./src/pages/use-backtracking-algorithm/index.tsx":
/*!********************************************************!*\
  !*** ./src/pages/use-backtracking-algorithm/index.tsx ***!
  \********************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ UseBacktrackingAlgorithmPage; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\nvar _s = $RefreshSig$();\n\nconst TEMPLATE_BOARD = [\n    [\n        9,\n        0,\n        0,\n        0,\n        0,\n        0,\n        2,\n        5,\n        0\n    ],\n    [\n        0,\n        0,\n        4,\n        0,\n        0,\n        7,\n        0,\n        9,\n        0\n    ],\n    [\n        5,\n        2,\n        0,\n        0,\n        4,\n        0,\n        6,\n        0,\n        0\n    ],\n    [\n        0,\n        6,\n        2,\n        0,\n        5,\n        9,\n        0,\n        3,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        4,\n        0,\n        8,\n        3,\n        0,\n        1,\n        2,\n        0\n    ],\n    [\n        0,\n        0,\n        6,\n        0,\n        8,\n        0,\n        0,\n        7,\n        9\n    ],\n    [\n        0,\n        7,\n        0,\n        6,\n        0,\n        0,\n        3,\n        0,\n        0\n    ],\n    [\n        0,\n        9,\n        5,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1\n    ]\n];\nfunction generateBoardString(board) {\n    let boardString = \"\";\n    for(let r = 0; r < 9; r++){\n        let rowParagraph = \"\";\n        for(let c = 0; c < 9; c++){\n            rowParagraph = rowParagraph + board[r][c] + \"  \";\n        }\n        boardString = boardString + \"<br>\" + rowParagraph;\n    }\n    return boardString;\n}\nfunction findEmptyCell(board) {\n    let cords = null;\n    // loop over cells until find empty:\n    for(let r = 0; r < 9; r++){\n        for(let c = 0; c < 9; c++){\n            // console.log(r, c, board[r][c]);\n            if (!board[r][c]) {\n                cords = {\n                    r,\n                    c\n                };\n                console.log(\"Empty cell found:\", cords);\n                return cords;\n            }\n        }\n    }\n    return cords;\n}\nfunction findCellValue(board, cords) {\n    let potentialValue = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;\n    if (potentialValue > 9) return null;\n    // check if the value is unique in a row, col & 3*3 box:\n    const isUniqueInTheRow = !board[cords.r].includes(potentialValue);\n    //================ isUniqueInTheCol =======================\n    let isUniqueInTheCol = true;\n    for(let r = 0; r < 9; r++){\n        if (board[r][cords.c] === potentialValue) {\n            isUniqueInTheCol = false;\n            break;\n        }\n    }\n    //================ isUniqueInTheBox =======================\n    // 0-2; 3-5; 6-8\n    const boxRs = cords.r < 3 ? [\n        0,\n        1,\n        2\n    ] : cords.r < 6 ? [\n        3,\n        4,\n        5\n    ] : [\n        6,\n        7,\n        8\n    ];\n    const boxCs = cords.c < 3 ? [\n        0,\n        1,\n        2\n    ] : cords.c < 6 ? [\n        3,\n        4,\n        5\n    ] : [\n        6,\n        7,\n        8\n    ];\n    let box = [];\n    for(let r = 0; r < 3; r++){\n        for(let c = 0; c < 3; c++){\n            box = [\n                ...box,\n                board[boxRs[r]][boxCs[c]]\n            ];\n        }\n    }\n    const isUniqueInTheBox = !box.includes(potentialValue);\n    //===================================================\n    if (isUniqueInTheRow && isUniqueInTheCol && isUniqueInTheBox) {\n        console.log(\"Found potential value for\", cords, potentialValue);\n        return potentialValue;\n    } else {\n        // increase potentialValue & check:\n        return findCellValue(board, cords, potentialValue + 1);\n    }\n}\n/**\r\n * If coords were passed, generate solution (step) for these cords,\r\n * if no coords => generate solution (step) for nearest empty cell,\r\n * return step or undefined\r\n */ function generateStep(board, potentialValue, coords) {\n    const cellCords = coords || findEmptyCell(board);\n    if (!cellCords) {\n        console.log(\"There is no cell coords to work with...\");\n        return undefined;\n    }\n    const cellValue = findCellValue(board, cellCords, potentialValue);\n    if (!cellValue) {\n        console.log(\"No cell value found... Dead end...\");\n        // go to the prev step & ++ the value\n        // return generateStep(board, potentialValue++, coords)\n        return;\n    }\n    const step = {\n        coords: cellCords,\n        value: cellValue\n    };\n    return step;\n}\nfunction UseBacktrackingAlgorithmPage() {\n    _s();\n    const [isInit, setIsInit] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [isSolved, setIsSolved] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [stepsCount, setStepsCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [board, setBoard] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(TEMPLATE_BOARD);\n    const [steps, setSteps] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    // const board: Board = steps.length\n    // \t? TEMPLATE_BOARD.map((row, r) =>\n    // \t\t\trow.map((col, c) => {\n    // \t\t\t\t// Find the step that matches the current coordinates\n    // \t\t\t\tconst step = steps.find((s) => s.coords.c === c && s.coords.r === r);\n    // \t\t\t\treturn step ? step.value : TEMPLATE_BOARD[r][c];\n    // \t\t\t})\n    // \t  )\n    // \t: TEMPLATE_BOARD;\n    const boardString = generateBoardString(board);\n    const currentCoords = findEmptyCell(board);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!isInit) return;\n        if (!isSolved) {\n            // if this is the first iteration, prevStep will be undefined,\n            // next iteration will start, when steps will be updated,\n            const prevStep = steps.length ? steps[steps.length - 1] : undefined;\n            if (!currentCoords) {\n                console.error(\"No current coords...\");\n                setIsInit(false);\n                setIsSolved(true);\n                console.log(\"Final steps count:\", stepsCount);\n                return;\n            }\n            const nextStep = generateStep(board, value, currentCoords);\n            if (nextStep) {\n                const updatedBoard = board.map((row, r)=>row.map((col, c)=>r === currentCoords.r && c === currentCoords.c ? nextStep.value : col));\n                setBoard(updatedBoard);\n                setSteps((s)=>[\n                        ...s,\n                        nextStep\n                    ]);\n                setValue(1);\n                setStepsCount((c)=>c += 1);\n            } else {\n                if (!prevStep) {\n                    console.error(\"No next & no prev step...\");\n                    setIsInit(false);\n                    setIsSolved(true);\n                    return;\n                }\n                // return to prev step and update value\n                // discard prevStep\n                const updatedBoard = board.map((row, r)=>row.map((col, c)=>r === prevStep.coords.r && c === prevStep.coords.c ? 0 : col));\n                const updatedSteps = steps.filter((s, i)=>i !== steps.length - 1);\n                const updatedPotentialValue = prevStep.value + 1;\n                setBoard(updatedBoard);\n                setSteps(updatedSteps);\n                setValue(updatedPotentialValue);\n                setStepsCount((c)=>c += 1);\n            // !!! coords remain the same, even they are recalculated, because last step is discarded & cell value = 0 again !!!\n            }\n        }\n    }, [\n        board,\n        currentCoords,\n        isInit,\n        isSolved,\n        steps,\n        stepsCount,\n        value\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"steps\", steps);\n    }, [\n        steps\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n        dangerouslySetInnerHTML: {\n            __html: boardString\n        }\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\Acer\\\\Desktop\\\\DEV\\\\sudoku-solver\\\\src\\\\pages\\\\use-backtracking-algorithm\\\\index.tsx\",\n        lineNumber: 200,\n        columnNumber: 9\n    }, this);\n}\n_s(UseBacktrackingAlgorithmPage, \"mFhPyFrb1rQrXZmhnnYt/4a+Ff0=\");\n_c = UseBacktrackingAlgorithmPage;\nvar _c;\n$RefreshReg$(_c, \"UseBacktrackingAlgorithmPage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pages/use-backtracking-algorithm/index.tsx\n"));

/***/ })

});